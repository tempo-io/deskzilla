DataFile ::=
  DataFileHeader
  [ Expansion ]*
  [ Expansion { unfinished, to be rolled back } ]

DataFileHeader ::=
  DataFileSignature :0xDA7AF11E
  HeaderLength :INT4 { specifies total length of the header, including signature and padding }
  DataFileUID :INT14 { 14-byte integer generated by util.external.UID class }
  DataFileVersion :INT2 
  [ CustomElement ]*
  CRC32 { without padding }
  Padding

CustomElement ::=
  CustomElementMarker
  CustomElementLength :CompactInt { specifies length of the element, excluding marker and length fields }
  CustomElementContent :BYTE[CustomHeaderElementLength]

CustomElementMarker ::=
  INT1 \ 'C' { specifies type of custom information, except for 'C' which is reserved for CRC32 }

CRC32 ::=
  'C'
  INT4 { representing crc32 hash value of the preceding bytes, starting from the beginning of the term }

Padding ::=
  [ 0x00 ]* { the number of zeroes needed to fill required length of the element }

Expansion ::=
  ExpansionStartMarker :0xFFFFFFFF
  UCN
  [ Atom ]+
  NoMoreAtomsMarker :b11000000
  [ CustomElement ]*
  CRC32
  ExpansionEndMarker :0xAAAAAAAA
  Padding

UCN ::=
  CompactLong { telling UCN of the expansion; all atoms will have this UCN; ucn may only increase throughout the file }

Atom ::=
  AtomMarker :b10000000
  AtomID :CompactLong { increasing ID of the atom }
  [ Junction ]+
  [ AtomExtension ]*

Junction ::=
  JunctionCode
  Key :CompactLong
  Value

JunctionCode ::=
  b00
  ValueType

ValueType ::=
  || b000000 { for CompactLong value (PLong particle)}
  || b000110 { for Iso-String format }
  || b000111 { for custom-length value format }
  || { todo : what to do for unknown value format }

Value ::=
  || CompactLong { corresponding to b000 type }
  || ValueLength:CompactLong ValueBytes{said length long} { corresponding to b111 ype }
  || CompactString { corresponding to b110 type }

AtomExtension ::=
  b01
  AtomExtensionID :BIT6
  AtomExtensionLength :CompactInt
  AtomExtensionContent :BYTE[AtomExtensionLength]



==============================================
Version 1.1

Custom Element: CustomProperties

CustomProperties ::=
  CustomPropertiesMarker :'P'
  CustomPropertiesLength :CompactInt
  CustomPropertiesMap

CustomPropertiesMap ::=
  [ CustomPropertiesMapEntry ]*
  CustomPropertiesMapEnd :CompactString = null

CustomPropertiesMapEntry ::=
  Name :CompactString != null
  Value :CompactString != null
